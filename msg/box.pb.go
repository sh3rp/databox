// Code generated by protoc-gen-go. DO NOT EDIT.
// source: box.proto

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	box.proto

It has these top-level messages:
	AuthRequest
	AuthResponse
	UnlockRequest
	Token
	Request
	Key
	None
	Version
	Search
	Box
	Boxes
	Link
	Links
	Note
	Notes
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Key_Type int32

const (
	Key_BOX         Key_Type = 0
	Key_LINK        Key_Type = 1
	Key_NOTE        Key_Type = 2
	Key_NOTE_SECURE Key_Type = 3
)

var Key_Type_name = map[int32]string{
	0: "BOX",
	1: "LINK",
	2: "NOTE",
	3: "NOTE_SECURE",
}
var Key_Type_value = map[string]int32{
	"BOX":         0,
	"LINK":        1,
	"NOTE":        2,
	"NOTE_SECURE": 3,
}

func (x Key_Type) String() string {
	return proto.EnumName(Key_Type_name, int32(x))
}
func (Key_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type AuthRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AuthRequest) Reset()                    { *m = AuthRequest{} }
func (m *AuthRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()               {}
func (*AuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuthRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthResponse struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Token   *Token `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *AuthResponse) Reset()                    { *m = AuthResponse{} }
func (m *AuthResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()               {}
func (*AuthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AuthResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AuthResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AuthResponse) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type UnlockRequest struct {
	Token       *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Box         *Box   `protobuf:"bytes,2,opt,name=box" json:"box,omitempty"`
	BoxPassword string `protobuf:"bytes,3,opt,name=boxPassword" json:"boxPassword,omitempty"`
}

func (m *UnlockRequest) Reset()                    { *m = UnlockRequest{} }
func (m *UnlockRequest) String() string            { return proto.CompactTextString(m) }
func (*UnlockRequest) ProtoMessage()               {}
func (*UnlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UnlockRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *UnlockRequest) GetBox() *Box {
	if m != nil {
		return m.Box
	}
	return nil
}

func (m *UnlockRequest) GetBoxPassword() string {
	if m != nil {
		return m.BoxPassword
	}
	return ""
}

type Token struct {
	Username       string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	TokenHash      string `protobuf:"bytes,2,opt,name=tokenHash" json:"tokenHash,omitempty"`
	ExpirationTime int64  `protobuf:"varint,3,opt,name=expirationTime" json:"expirationTime,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Token) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Token) GetTokenHash() string {
	if m != nil {
		return m.TokenHash
	}
	return ""
}

func (m *Token) GetExpirationTime() int64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

type Request struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	// Types that are valid to be assigned to Objects:
	//	*Request_Box
	//	*Request_Link
	//	*Request_Search
	Objects isRequest_Objects `protobuf_oneof:"Objects"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isRequest_Objects interface {
	isRequest_Objects()
}

type Request_Box struct {
	Box *Box `protobuf:"bytes,2,opt,name=box,oneof"`
}
type Request_Link struct {
	Link *Link `protobuf:"bytes,3,opt,name=link,oneof"`
}
type Request_Search struct {
	Search *Search `protobuf:"bytes,4,opt,name=search,oneof"`
}

func (*Request_Box) isRequest_Objects()    {}
func (*Request_Link) isRequest_Objects()   {}
func (*Request_Search) isRequest_Objects() {}

func (m *Request) GetObjects() isRequest_Objects {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *Request) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *Request) GetBox() *Box {
	if x, ok := m.GetObjects().(*Request_Box); ok {
		return x.Box
	}
	return nil
}

func (m *Request) GetLink() *Link {
	if x, ok := m.GetObjects().(*Request_Link); ok {
		return x.Link
	}
	return nil
}

func (m *Request) GetSearch() *Search {
	if x, ok := m.GetObjects().(*Request_Search); ok {
		return x.Search
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Request_OneofMarshaler, _Request_OneofUnmarshaler, _Request_OneofSizer, []interface{}{
		(*Request_Box)(nil),
		(*Request_Link)(nil),
		(*Request_Search)(nil),
	}
}

func _Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Request)
	// Objects
	switch x := m.Objects.(type) {
	case *Request_Box:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Box); err != nil {
			return err
		}
	case *Request_Link:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Link); err != nil {
			return err
		}
	case *Request_Search:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Search); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Request.Objects has unexpected type %T", x)
	}
	return nil
}

func _Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Request)
	switch tag {
	case 2: // Objects.box
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Box)
		err := b.DecodeMessage(msg)
		m.Objects = &Request_Box{msg}
		return true, err
	case 3: // Objects.link
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Link)
		err := b.DecodeMessage(msg)
		m.Objects = &Request_Link{msg}
		return true, err
	case 4: // Objects.search
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Search)
		err := b.DecodeMessage(msg)
		m.Objects = &Request_Search{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Request)
	// Objects
	switch x := m.Objects.(type) {
	case *Request_Box:
		s := proto.Size(x.Box)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Link:
		s := proto.Size(x.Link)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Search:
		s := proto.Size(x.Search)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Key struct {
	Type  Key_Type `protobuf:"varint,1,opt,name=type,enum=msg.Key_Type" json:"type,omitempty"`
	Id    string   `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	BoxId string   `protobuf:"bytes,3,opt,name=boxId" json:"boxId,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Key) GetType() Key_Type {
	if m != nil {
		return m.Type
	}
	return Key_BOX
}

func (m *Key) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Key) GetBoxId() string {
	if m != nil {
		return m.BoxId
	}
	return ""
}

type None struct {
}

func (m *None) Reset()                    { *m = None{} }
func (m *None) String() string            { return proto.CompactTextString(m) }
func (*None) ProtoMessage()               {}
func (*None) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Version struct {
	Major int32 `protobuf:"varint,1,opt,name=major" json:"major,omitempty"`
	Minor int32 `protobuf:"varint,2,opt,name=minor" json:"minor,omitempty"`
	Patch int32 `protobuf:"varint,3,opt,name=patch" json:"patch,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Version) GetMajor() int32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *Version) GetMinor() int32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *Version) GetPatch() int32 {
	if m != nil {
		return m.Patch
	}
	return 0
}

type Search struct {
	Term  string `protobuf:"bytes,1,opt,name=term" json:"term,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Page  int32  `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
}

func (m *Search) Reset()                    { *m = Search{} }
func (m *Search) String() string            { return proto.CompactTextString(m) }
func (*Search) ProtoMessage()               {}
func (*Search) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Search) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *Search) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Search) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type Box struct {
	Id                 *Key   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description        string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	EncryptedSignature []byte `protobuf:"bytes,4,opt,name=encryptedSignature,proto3" json:"encryptedSignature,omitempty"`
}

func (m *Box) Reset()                    { *m = Box{} }
func (m *Box) String() string            { return proto.CompactTextString(m) }
func (*Box) ProtoMessage()               {}
func (*Box) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Box) GetId() *Key {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Box) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Box) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Box) GetEncryptedSignature() []byte {
	if m != nil {
		return m.EncryptedSignature
	}
	return nil
}

type Boxes struct {
	Boxes []*Box `protobuf:"bytes,1,rep,name=boxes" json:"boxes,omitempty"`
}

func (m *Boxes) Reset()                    { *m = Boxes{} }
func (m *Boxes) String() string            { return proto.CompactTextString(m) }
func (*Boxes) ProtoMessage()               {}
func (*Boxes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Boxes) GetBoxes() []*Box {
	if m != nil {
		return m.Boxes
	}
	return nil
}

type Link struct {
	Id          *Key     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Url         string   `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Tags        []string `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	CreatedOn   int64    `protobuf:"varint,6,opt,name=createdOn" json:"createdOn,omitempty"`
}

func (m *Link) Reset()                    { *m = Link{} }
func (m *Link) String() string            { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()               {}
func (*Link) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Link) GetId() *Key {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Link) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Link) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Link) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Link) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Link) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

type Links struct {
	Links []*Link `protobuf:"bytes,1,rep,name=links" json:"links,omitempty"`
}

func (m *Links) Reset()                    { *m = Links{} }
func (m *Links) String() string            { return proto.CompactTextString(m) }
func (*Links) ProtoMessage()               {}
func (*Links) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Links) GetLinks() []*Link {
	if m != nil {
		return m.Links
	}
	return nil
}

type Note struct {
	Id           *Key     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title        string   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Text         []byte   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Tags         []string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	CreatedOn    int64    `protobuf:"varint,5,opt,name=createdOn" json:"createdOn,omitempty"`
	LastModified int64    `protobuf:"varint,6,opt,name=lastModified" json:"lastModified,omitempty"`
}

func (m *Note) Reset()                    { *m = Note{} }
func (m *Note) String() string            { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()               {}
func (*Note) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Note) GetId() *Key {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Note) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Note) GetText() []byte {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *Note) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Note) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *Note) GetLastModified() int64 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

type Notes struct {
	Notes []*Note `protobuf:"bytes,1,rep,name=notes" json:"notes,omitempty"`
}

func (m *Notes) Reset()                    { *m = Notes{} }
func (m *Notes) String() string            { return proto.CompactTextString(m) }
func (*Notes) ProtoMessage()               {}
func (*Notes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Notes) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthRequest)(nil), "msg.AuthRequest")
	proto.RegisterType((*AuthResponse)(nil), "msg.AuthResponse")
	proto.RegisterType((*UnlockRequest)(nil), "msg.UnlockRequest")
	proto.RegisterType((*Token)(nil), "msg.Token")
	proto.RegisterType((*Request)(nil), "msg.Request")
	proto.RegisterType((*Key)(nil), "msg.Key")
	proto.RegisterType((*None)(nil), "msg.None")
	proto.RegisterType((*Version)(nil), "msg.Version")
	proto.RegisterType((*Search)(nil), "msg.Search")
	proto.RegisterType((*Box)(nil), "msg.Box")
	proto.RegisterType((*Boxes)(nil), "msg.Boxes")
	proto.RegisterType((*Link)(nil), "msg.Link")
	proto.RegisterType((*Links)(nil), "msg.Links")
	proto.RegisterType((*Note)(nil), "msg.Note")
	proto.RegisterType((*Notes)(nil), "msg.Notes")
	proto.RegisterEnum("msg.Key_Type", Key_Type_name, Key_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BoxService service

type BoxServiceClient interface {
	Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	GetVersion(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Version, error)
	UnlockBox(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*Box, error)
	NewBox(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*Box, error)
	SaveBox(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Box, error)
	GetBoxById(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Box, error)
	GetBoxes(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Boxes, error)
	NewLink(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Link, error)
	SaveLink(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Link, error)
	GetLinkById(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Link, error)
	GetLinksByBoxId(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Links, error)
	SearchLinks(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Links, error)
}

type boxServiceClient struct {
	cc *grpc.ClientConn
}

func NewBoxServiceClient(cc *grpc.ClientConn) BoxServiceClient {
	return &boxServiceClient{cc}
}

func (c *boxServiceClient) Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := grpc.Invoke(ctx, "/msg.BoxService/Authenticate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) GetVersion(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/msg.BoxService/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) UnlockBox(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*Box, error) {
	out := new(Box)
	err := grpc.Invoke(ctx, "/msg.BoxService/UnlockBox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) NewBox(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*Box, error) {
	out := new(Box)
	err := grpc.Invoke(ctx, "/msg.BoxService/NewBox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) SaveBox(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Box, error) {
	out := new(Box)
	err := grpc.Invoke(ctx, "/msg.BoxService/SaveBox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) GetBoxById(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Box, error) {
	out := new(Box)
	err := grpc.Invoke(ctx, "/msg.BoxService/GetBoxById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) GetBoxes(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Boxes, error) {
	out := new(Boxes)
	err := grpc.Invoke(ctx, "/msg.BoxService/GetBoxes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) NewLink(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Link, error) {
	out := new(Link)
	err := grpc.Invoke(ctx, "/msg.BoxService/NewLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) SaveLink(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Link, error) {
	out := new(Link)
	err := grpc.Invoke(ctx, "/msg.BoxService/SaveLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) GetLinkById(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Link, error) {
	out := new(Link)
	err := grpc.Invoke(ctx, "/msg.BoxService/GetLinkById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) GetLinksByBoxId(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Links, error) {
	out := new(Links)
	err := grpc.Invoke(ctx, "/msg.BoxService/GetLinksByBoxId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) SearchLinks(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Links, error) {
	out := new(Links)
	err := grpc.Invoke(ctx, "/msg.BoxService/SearchLinks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BoxService service

type BoxServiceServer interface {
	Authenticate(context.Context, *AuthRequest) (*AuthResponse, error)
	GetVersion(context.Context, *Request) (*Version, error)
	UnlockBox(context.Context, *UnlockRequest) (*Box, error)
	NewBox(context.Context, *UnlockRequest) (*Box, error)
	SaveBox(context.Context, *Request) (*Box, error)
	GetBoxById(context.Context, *Request) (*Box, error)
	GetBoxes(context.Context, *Request) (*Boxes, error)
	NewLink(context.Context, *Request) (*Link, error)
	SaveLink(context.Context, *Request) (*Link, error)
	GetLinkById(context.Context, *Request) (*Link, error)
	GetLinksByBoxId(context.Context, *Request) (*Links, error)
	SearchLinks(context.Context, *Request) (*Links, error)
}

func RegisterBoxServiceServer(s *grpc.Server, srv BoxServiceServer) {
	s.RegisterService(&_BoxService_serviceDesc, srv)
}

func _BoxService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.BoxService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).Authenticate(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.BoxService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).GetVersion(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_UnlockBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).UnlockBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.BoxService/UnlockBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).UnlockBox(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_NewBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).NewBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.BoxService/NewBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).NewBox(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_SaveBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).SaveBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.BoxService/SaveBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).SaveBox(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_GetBoxById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).GetBoxById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.BoxService/GetBoxById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).GetBoxById(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_GetBoxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).GetBoxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.BoxService/GetBoxes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).GetBoxes(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_NewLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).NewLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.BoxService/NewLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).NewLink(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_SaveLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).SaveLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.BoxService/SaveLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).SaveLink(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_GetLinkById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).GetLinkById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.BoxService/GetLinkById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).GetLinkById(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_GetLinksByBoxId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).GetLinksByBoxId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.BoxService/GetLinksByBoxId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).GetLinksByBoxId(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_SearchLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).SearchLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.BoxService/SearchLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).SearchLinks(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _BoxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.BoxService",
	HandlerType: (*BoxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _BoxService_Authenticate_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _BoxService_GetVersion_Handler,
		},
		{
			MethodName: "UnlockBox",
			Handler:    _BoxService_UnlockBox_Handler,
		},
		{
			MethodName: "NewBox",
			Handler:    _BoxService_NewBox_Handler,
		},
		{
			MethodName: "SaveBox",
			Handler:    _BoxService_SaveBox_Handler,
		},
		{
			MethodName: "GetBoxById",
			Handler:    _BoxService_GetBoxById_Handler,
		},
		{
			MethodName: "GetBoxes",
			Handler:    _BoxService_GetBoxes_Handler,
		},
		{
			MethodName: "NewLink",
			Handler:    _BoxService_NewLink_Handler,
		},
		{
			MethodName: "SaveLink",
			Handler:    _BoxService_SaveLink_Handler,
		},
		{
			MethodName: "GetLinkById",
			Handler:    _BoxService_GetLinkById_Handler,
		},
		{
			MethodName: "GetLinksByBoxId",
			Handler:    _BoxService_GetLinksByBoxId_Handler,
		},
		{
			MethodName: "SearchLinks",
			Handler:    _BoxService_SearchLinks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "box.proto",
}

func init() { proto.RegisterFile("box.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 865 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4d, 0x73, 0xe3, 0x44,
	0x10, 0x95, 0x22, 0xc9, 0x1f, 0x6d, 0x6f, 0xd6, 0x4c, 0xed, 0x41, 0x95, 0xda, 0x62, 0xcd, 0xc0,
	0x2e, 0x06, 0x0a, 0x1f, 0x02, 0xfc, 0x00, 0x44, 0x85, 0x4d, 0xca, 0x8b, 0x43, 0xc9, 0x5e, 0x8a,
	0x13, 0x94, 0x2c, 0x35, 0xce, 0x6c, 0x6c, 0x8d, 0xd0, 0x8c, 0x37, 0xf2, 0x1d, 0x6e, 0xfc, 0x02,
	0x8a, 0x03, 0x3f, 0x95, 0x9a, 0x1e, 0x29, 0xb1, 0x43, 0x12, 0x96, 0x5b, 0xf7, 0xeb, 0xd7, 0xa3,
	0x7e, 0x3d, 0xcf, 0x63, 0xe8, 0x2e, 0x64, 0x35, 0x2e, 0x4a, 0xa9, 0x25, 0xf3, 0xd6, 0x6a, 0xc9,
	0x4f, 0xa0, 0xf7, 0xf5, 0x46, 0x5f, 0xc4, 0xf8, 0xeb, 0x06, 0x95, 0x66, 0x47, 0xd0, 0xd9, 0x28,
	0x2c, 0xf3, 0x64, 0x8d, 0xa1, 0x3b, 0x74, 0x47, 0xdd, 0xf8, 0x3a, 0x37, 0xb5, 0x22, 0x51, 0xea,
	0x4a, 0x96, 0x59, 0x78, 0x60, 0x6b, 0x4d, 0xce, 0x7f, 0x82, 0xbe, 0x3d, 0x46, 0x15, 0x32, 0x57,
	0xc8, 0x18, 0xf8, 0xa9, 0xcc, 0xec, 0x19, 0x41, 0x4c, 0x31, 0x0b, 0xa1, 0xbd, 0x46, 0xa5, 0x92,
	0x25, 0xd6, 0xed, 0x4d, 0xca, 0x86, 0x10, 0x68, 0x79, 0x89, 0x79, 0xe8, 0x0d, 0xdd, 0x51, 0xef,
	0x18, 0xc6, 0x6b, 0xb5, 0x1c, 0xcf, 0x0d, 0x12, 0xdb, 0x02, 0x97, 0xf0, 0xe8, 0x75, 0xbe, 0x92,
	0xe9, 0x65, 0x33, 0xe8, 0x75, 0x8b, 0x7b, 0x4f, 0x0b, 0x3b, 0x02, 0x6f, 0x21, 0x2b, 0xfa, 0x54,
	0xef, 0xb8, 0x43, 0xf5, 0x48, 0x56, 0xb1, 0x01, 0xd9, 0x10, 0x7a, 0x0b, 0x59, 0x7d, 0xdf, 0xa8,
	0xf1, 0x68, 0x9c, 0x5d, 0x88, 0x0b, 0x08, 0xe6, 0xf5, 0x31, 0xf7, 0x6f, 0xe4, 0x29, 0x74, 0xe9,
	0x5b, 0xa7, 0x89, 0xba, 0xa8, 0x35, 0xdd, 0x00, 0xec, 0x05, 0x1c, 0x62, 0x55, 0x88, 0x32, 0xd1,
	0x42, 0xe6, 0x73, 0xb1, 0x46, 0xfa, 0x8e, 0x17, 0xdf, 0x42, 0xf9, 0x5f, 0x2e, 0xb4, 0xdf, 0x5d,
	0xd6, 0xd3, 0x3b, 0x65, 0x9d, 0x3a, 0x56, 0xd8, 0x33, 0xf0, 0x57, 0x22, 0xbf, 0xac, 0x17, 0xd9,
	0xa5, 0xf2, 0x2b, 0x91, 0x5f, 0x9e, 0x3a, 0x31, 0x15, 0xd8, 0x73, 0x68, 0x29, 0x4c, 0xca, 0xf4,
	0x22, 0xf4, 0x89, 0xd2, 0x23, 0xca, 0x8c, 0xa0, 0x53, 0x27, 0xae, 0x8b, 0x51, 0x17, 0xda, 0xe7,
	0x8b, 0x37, 0x98, 0x6a, 0xc5, 0x7f, 0x73, 0xc1, 0x9b, 0xe0, 0x96, 0x7d, 0x00, 0xbe, 0xde, 0x16,
	0x76, 0x09, 0x87, 0xc7, 0x8f, 0xa8, 0x6f, 0x82, 0xdb, 0xf1, 0x7c, 0x5b, 0x60, 0x4c, 0x25, 0x76,
	0x08, 0x07, 0xa2, 0xf1, 0xc6, 0x81, 0xc8, 0xd8, 0x13, 0x08, 0x16, 0xb2, 0x3a, 0x6b, 0x16, 0x6c,
	0x13, 0xfe, 0x25, 0xf8, 0xa6, 0x87, 0xb5, 0xc1, 0x8b, 0xce, 0x7f, 0x1c, 0x38, 0xac, 0x03, 0xfe,
	0xab, 0xb3, 0xe9, 0x64, 0xe0, 0x9a, 0x68, 0x7a, 0x3e, 0x3f, 0x19, 0x1c, 0xb0, 0xc7, 0xd0, 0x33,
	0xd1, 0xcf, 0xb3, 0x93, 0x6f, 0x5e, 0xc7, 0x27, 0x03, 0x8f, 0xb7, 0xc0, 0x9f, 0xca, 0x1c, 0xf9,
	0x04, 0xda, 0x3f, 0x60, 0xa9, 0x84, 0xcc, 0xcd, 0xf1, 0xeb, 0xe4, 0x8d, 0x2c, 0x6b, 0x97, 0xd9,
	0x84, 0x50, 0x91, 0xcb, 0x92, 0xe6, 0x30, 0xa8, 0x49, 0x0c, 0x5a, 0x24, 0x3a, 0xbd, 0xa0, 0x51,
	0x82, 0xd8, 0x26, 0xfc, 0x5b, 0x68, 0x59, 0xe9, 0xc6, 0xb0, 0x1a, 0xcb, 0x75, 0x7d, 0xc5, 0x14,
	0x9b, 0x9e, 0x54, 0x6e, 0x72, 0xdd, 0x9c, 0x44, 0x89, 0x61, 0x16, 0xc6, 0xc3, 0xf6, 0x20, 0x8a,
	0xf9, 0xef, 0x2e, 0x78, 0x91, 0xac, 0x58, 0x48, 0x0b, 0x70, 0x77, 0xee, 0x66, 0x82, 0x5b, 0x5a,
	0x05, 0x03, 0x9f, 0x2c, 0x64, 0x97, 0x43, 0xb1, 0x71, 0x61, 0x86, 0x2a, 0x2d, 0x45, 0x61, 0xbc,
	0xd0, 0xb8, 0x70, 0x07, 0x62, 0x63, 0x60, 0x98, 0xa7, 0xe5, 0xb6, 0xd0, 0x98, 0xcd, 0xc4, 0x32,
	0x4f, 0xf4, 0xa6, 0x44, 0xba, 0xb9, 0x7e, 0x7c, 0x47, 0x85, 0x7f, 0x0c, 0x41, 0x24, 0x2b, 0x54,
	0xec, 0x7d, 0xda, 0x3c, 0xaa, 0xd0, 0x1d, 0x7a, 0x7b, 0xf6, 0xb7, 0x30, 0xff, 0xd3, 0x05, 0xdf,
	0xf8, 0xe2, 0x7f, 0x4e, 0x3c, 0x00, 0x6f, 0x53, 0xae, 0xea, 0x49, 0x4d, 0x78, 0x5b, 0x83, 0xff,
	0x6f, 0x0d, 0x66, 0xb3, 0xc9, 0x52, 0x85, 0xc1, 0xd0, 0xa3, 0xcd, 0x26, 0x4b, 0x65, 0x7e, 0x38,
	0x69, 0x89, 0x89, 0xc6, 0xec, 0x3c, 0x0f, 0x5b, 0xf4, 0xab, 0xb8, 0x01, 0xf8, 0x08, 0x02, 0x33,
	0x9b, 0x62, 0xcf, 0x20, 0x30, 0xa6, 0x6d, 0x54, 0xdc, 0xd8, 0x39, 0xb6, 0x38, 0xff, 0xdb, 0x35,
	0xae, 0xd0, 0xf8, 0x80, 0x8c, 0x27, 0x10, 0x68, 0xa1, 0x57, 0x8d, 0x0e, 0x9b, 0xd8, 0xeb, 0xae,
	0x34, 0x29, 0xe9, 0xc7, 0x14, 0x5f, 0x0f, 0xea, 0xdf, 0x37, 0x68, 0x70, 0x6b, 0x50, 0xc6, 0xa1,
	0xbf, 0x4a, 0x94, 0xfe, 0x4e, 0x66, 0xe2, 0x17, 0x81, 0x59, 0xad, 0x64, 0x0f, 0x33, 0x62, 0xcc,
	0x84, 0x24, 0x26, 0x37, 0xc1, 0x9e, 0x18, 0x53, 0x8a, 0x2d, 0x7e, 0xfc, 0x87, 0x0f, 0x10, 0xc9,
	0x6a, 0x86, 0xe5, 0x5b, 0x91, 0x22, 0xfb, 0xca, 0x3e, 0xa9, 0x98, 0x6b, 0x91, 0x26, 0x1a, 0xd9,
	0x80, 0x1a, 0x76, 0x1e, 0xeb, 0xa3, 0xf7, 0x76, 0x10, 0xfb, 0xee, 0x72, 0x87, 0x7d, 0x0a, 0xf0,
	0x12, 0x75, 0xf3, 0x13, 0xe9, 0x13, 0xa5, 0x69, 0xb0, 0x59, 0x5d, 0xe3, 0x0e, 0xfb, 0x0c, 0xba,
	0xf6, 0x55, 0x35, 0xde, 0x65, 0x54, 0xdc, 0x7b, 0x65, 0x8f, 0xae, 0x7d, 0xc3, 0x1d, 0x36, 0x82,
	0xd6, 0x14, 0xaf, 0xde, 0x85, 0xf9, 0x21, 0xb4, 0x67, 0xc9, 0x5b, 0x34, 0xd4, 0xfd, 0xef, 0xef,
	0x92, 0x5e, 0xd0, 0x9c, 0x91, 0xac, 0xa2, 0xed, 0x59, 0xf6, 0x20, 0xaf, 0x63, 0x79, 0xa8, 0x6e,
	0xb1, 0xa0, 0x61, 0xa1, 0xe2, 0x0e, 0xfb, 0x08, 0xda, 0x53, 0xbc, 0x22, 0x4f, 0xef, 0xd3, 0x6e,
	0x5c, 0xc3, 0x1d, 0xf6, 0x1c, 0x3a, 0x66, 0xb4, 0xff, 0xa2, 0x8d, 0xa0, 0xf7, 0x12, 0xb5, 0x49,
	0xee, 0x98, 0x6e, 0x8f, 0xf9, 0x39, 0x3c, 0xae, 0x99, 0x2a, 0xda, 0x46, 0xe6, 0x7d, 0xbb, 0x73,
	0x4a, 0x22, 0x70, 0x87, 0x7d, 0x02, 0x3d, 0xfb, 0xe0, 0x58, 0x83, 0x3f, 0x40, 0x5d, 0xb4, 0xe8,
	0x5f, 0xfa, 0x8b, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x32, 0x2e, 0x34, 0xb2, 0x07, 0x00,
	0x00,
}
